(**** II. ***)
(************)

use mach.int.Int
use real.RealInfix
use int.Power
use int.EuclideanDivision as ED

use ref.Refint

let power2 (l : int) : int 
  requires { 0 <= l }
  ensures { result = power 2 l }
  =   
    let res = ref 1 in
    for i=0 to l-1 do invariant { !res = power 2 i }
      res *= 2
    done;
    !res

let shift_left (z: int) (l:int) : int
  requires { 0 <= l }
  ensures { result = z * (power 2 l) } 
  = 
    z * power2 l

let ediv_mod (x:int) (y:int) : (int, int)
  requires { 0 < y }
  ensures { let d, r = result in 
  d = ED.div x y /\ r = ED.mod x y }
  =
    let x_abs = if x >= 0 then x else -x in
    let d = ref 0 in
    let r = ref x_abs in
    while !r >= y do 
      invariant { !r >= 0 && x_abs = !d * y + !r}
      variant { !r }
      incr d;
      r -= y
    done;
    if x >= 0 then (* assert { x = !d * y + !r }; *)
        (!d, !r)
    else 
      if !r = 0 then (* assert { x = - !d * y }; *)
        (- !d, 0)
      else (* assert { x =  (- !d - 1) * y + y - !r && 0 <= y - !r < y } *)
        (- !d - 1, y - !r)


let shift_right (z: int) (l:int) : int
  requires { 0 <= l }
  ensures { result = ED.div z (power 2 l) }
  =
  let d, _ = ediv_mod z (power2 l) in d
  
use real.Square
use real.FromInt
use real.Truncate


let function isqrt (n:int) : int
  requires { 0 <= n }
  ensures { result = floor (sqrt (from_int n)) }
  =
    let count = ref 0 in 
    let sum = ref 1 in 
    while !sum <= n do
      invariant { 0 <= !count }
      invariant { power !count 2 <= n }
      invariant { !sum = power (!count+1) 2 }
      variant {n - !sum}
      incr count;
      sum += 2 * !count + 1
    done;
    assert { !count <= floor (sqrt (from_int n)) 
      by  let z = from_int !count in 
          z*.z <=. from_int n && z >=. 0.
      so  sqrt (z*.z) = z
          && sqrt (z*.z) <=. sqrt (from_int n)
      so  z <=. sqrt (from_int n)
      so  floor z <= floor (sqrt (from_int n))
    };
    assert { sqrt (from_int n) <. from_int (!count + 1)
      by  let cplus1 = !count + 1 in 
          let z = cplus1 * cplus1 in 
          n < z && cplus1 >= 0
      so  from_int n <=. from_int z && from_int cplus1 >=. 0.
          && not (from_int n = from_int z)
      so  sqrt (from_int n) <=. sqrt (from_int z)
          && sqrt (from_int z) = from_int cplus1
          && not (sqrt (from_int n) = sqrt (from_int z))
      so  sqrt (from_int n) <=. from_int cplus1
          && not (sqrt (from_int n) = from_int cplus1)
    };
    !count

(**** III. ****)
(**************)

use real.PowerReal

constant b : real = 4.0

function _B (n:int) : real = pow b (from_int n)

lemma _B_non_neg: forall n:int. _B n >=. 0.

lemma _B_non_neg_strict: forall n:int. n <> 0 -> _B n >. 0.

lemma _B_group_homomorphism: 
  forall n m:int. _B n *. _B m = _B (n+m)

lemma _B_inverse: 
  forall n:int. _B n *. _B (-n) = 1.
  
lemma _B_sqrt_mul:
  forall a:real, n:int. 0. <=. a -> sqrt (a *. _B (2 * n)) = sqrt a *. _B n

lemma _B_spec_pos:
  forall n:int. 0 <= n -> _B n = from_int (power 4 n)

lemma _B_spec_neg_0:  
  forall n:int. n < 0 -> _B n *. from_int (power 4 (-n)) = 1.

lemma _B_spec_neg:
  forall n:int. n < 0 -> _B n = inv (from_int (power 4 (-n)))

lemma pow_mul2_exp:
  forall n:int. 0 <= n -> power 2 (2*n) = power 4 n
  
  
(**** IV. ****)
(**************)
  
predicate framing (x:real) (p:int) (n:int) =
  (from_int p -. 1.) *. (_B (-n)) <. x <. (from_int p +. 1.) *. (_B (-n))  

let round_z_over_4 (z : int)
  ensures { ((from_int z) -. 2.) *. (_B (-1)) 
  <. from_int result <=. ((from_int z) +. 2.) *. (_B (-1)) }
  =
  let res = shift_right (z + 2) 2 in
    assert {    from_int res <=. ((from_int z) +. 2.) *. (_B (-1))
            by  res * 4 <= z + 2
            so  from_int res <=. from_int (z + 2) *. inv 4. };
    assert {    from_int (z-2) <. from_int res *. 4.
            by  z + 2 = 4 * res + (ED.mod (z+2) 4) 
            so  z-2 < z + 2 - (ED.mod (z+2) 4) = 4 * res };
    res

let compute_round (n:int) (ghost z : real) (zp: int)
  requires { (from_int zp -. 2.) *. _B (-(n+1)) <. z 
  <=. (from_int zp +. 2.) *. _B (-(n+1)) }
  ensures { framing z result n } 
  =
  let resu = round_z_over_4 zp in
  assert {    z <. (from_int resu +. 1.) *. _B (-n) 
          by  z <=. (from_int zp +. 2.) *. _B (-(n+1))
                 =  (from_int zp -. 2.) *. _B (-(n+1)) +. _B (-n)
                 =  (from_int zp -. 2.) *. _B (-1) *. _B (-n) +. _B (-n) 
                 <.  from_int (resu) *. _B (-n) +. _B (-n) };
  assert {    z >.  (from_int resu -. 1.) *. _B (-n) 
          by  z >.  (from_int zp -. 2.) *. _B (-(n+1))
                 =  (from_int zp -. 2.) *. _B (-1) *. _B (-n)
                 =  ((from_int zp +. 2.) *. _B (-1) -. 1.) *. _B (-n) 
                >=. (from_int resu -. 1.) *. _B (-n)  };
  resu

let compute_add (n: int) (ghost x : real) (xp : int) (ghost y : real) (yp : int)
  requires { framing x xp (n+1) }
  requires { framing y yp (n+1) }
  ensures { framing (x+.y) result n }
  =
  compute_round n (x +. y) (xp + yp)


let compute_neg (n: int) (ghost x : real) (xp : int)
  requires { framing x xp n }
  ensures { framing (-.x) result n }
  =
  -xp

let compute_sub (n: int) (ghost x : real) (xp : int) (ghost y : real) (yp : int)
  requires { framing x xp (n+1) }
  requires { framing y yp (n+1) }
  ensures { framing (x-.y) result n }
  =
  let yp' = compute_neg (n+1) y yp in
  let resu = compute_add n x xp (-.y) yp' in
  assert { framing (-.y) yp' (n+1) };
  resu

let compute_cst (n: int) (x : int) : int
  ensures { framing (from_int x) result n } 
  =
  if n = 0 then
    x
  else 
    if n < 0 then (
      let resu = shift_right x (2*(-n)) in
        assert {  (from_int resu -. 1.) *. _B (-n) <. from_int x
             by ED.div x (power 4 (-n)) * (power 4 (-n)) - (power 4 (-n)) < x
             so (resu - 1)*(power 4 (-n)) < x
             so from_int (resu - 1) *. from_int (power 4 (-n)) <. from_int x
             so (from_int resu -. 1.) *. pow 4. (from_int (-n)) <. from_int x };
        assert {  from_int x <. (from_int resu +. 1.) *. _B (-n) 
             by x =  ED.div x (power 4 (-n)) * (power 4 (-n)) + ED.mod x (power 4 (-n))
                  <  ED.div x (power 4 (-n)) * (power 4 (-n)) + (power 4 (-n))
             so x < (resu + 1)*(power 4 (-n))
             so from_int x <. from_int (resu + 1) *. from_int (power 4 (-n))
              };
        shift_right x (2*(-n)))
    else (
      let resu = shift_left x (2*n) in
        assert {  (from_int resu -. 1.) *. _B (- n) <. from_int x 
             by   from_int x *. pow 4. (from_int n) *. _B (- n) -. _B (-n) <. from_int x
             so   (from_int x *. pow 4. (from_int n) -. 1.) *. _B (- n) <. from_int x 
             so   (from_int x *. pow 2. (2. *. from_int n) -. 1.) *. _B (- n) <. from_int x };
        assert {  (from_int resu +. 1.) *. _B (- n) >. from_int x 
             by   from_int x <. from_int x *. pow 4. (from_int n) *. _B (- n) +. _B (-n) 
             so   from_int x <. (from_int x *. pow 4. (from_int n) +. 1.) *. _B (- n)
             so   pow (2. *. 2.) (from_int n) = pow 2. (2. *. from_int n)
             &&   from_int x <. (from_int x *. pow 2. (2. *. from_int n) +. 1.) *. _B (- n) };
        resu)


(**** 4.4 Square Root ****)
(**************)

function _sqrt_incr (n:int) : real = inv (sqrt (from_int (n+1)) +. sqrt (from_int n)) 

let lemma _sqrt_incr_spec (n:int) : unit 
  requires { n >= 0 }
  ensures { sqrt (from_int (n+1)) = sqrt (from_int n) +. _sqrt_incr n }
  =
  let prod = (sqrt (from_int (n+1)) -. sqrt (from_int n))*.(sqrt (from_int (n+1)) +. sqrt (from_int n)) in 
  assert {  prod = 1. 
        by  prod = (sqrt (from_int (n+1)) -. sqrt (from_int n)) *. sqrt (from_int (n+1)) +. 
                   (sqrt (from_int (n+1)) -. sqrt (from_int n)) *. sqrt (from_int n)
                 = sqrt (from_int (n+1)) *. sqrt (from_int (n+1)) -. sqrt (from_int n) *. sqrt (from_int (n+1)) +. 
                   (sqrt (from_int (n+1)) -. sqrt (from_int n)) *. sqrt (from_int n) 
                 = sqrt (from_int (n+1)) *. sqrt (from_int (n+1)) -. sqrt (from_int n) *. sqrt (from_int (n+1)) 
                 +. sqrt (from_int (n+1)) *. sqrt (from_int n) -. sqrt (from_int n) *. sqrt (from_int n) 
                 = from_int (n+1) -. from_int n
                 = 1. 
        so  sqrt (from_int (n+1)) = sqrt (from_int n) +. _sqrt_incr n }; ()

let lemma _sqrt_incr_bounds (n:int) : unit 
  requires { n >= 0 }
  ensures { 0. <. _sqrt_incr n <=. 1. }
  =
  let prod = (sqrt (from_int (n+1)) +. sqrt (from_int n)) in 
  assert {  1. <=. 1. *. prod && prod >. 0. }; ()
  
let lemma sqrt_ceil_floor (n:int) : unit 
  requires { n >= 0 }
  ensures { ceil (sqrt (from_int (n+1))) - 1 <= floor (sqrt (from_int n)) }
  =
  let x = sqrt (from_int (n+1)) in
  let a = floor (sqrt (from_int n)) + 1 in 
  assert { ceil (sqrt (from_int (n+1))) - 1 < ceil x };
  assert {  ceil x <= a + 1
        by  x  = sqrt (from_int n) +. _sqrt_incr n 
              <=. from_int a +. _sqrt_incr n
              <=. from_int a +. 1.
        so  ceil x <= ceil (from_int (a + 1)) };
  if ceil x = a+1 then (
    assert {  n < a*a < n+1
           by sqrt (from_int n) <. from_int a <. sqrt (from_int (n+1))
           so from_int n = (sqrt (from_int n))*.(sqrt (from_int n)) 
                               <. (from_int a) *. (from_int a)
                               <. (sqrt (from_int (n+1))) *. (sqrt (from_int (n+1))) 
                               =  from_int (n+1) };
    absurd);
  assert { ceil x <= a };
  ()

let lemma sqrt_floor_floor (n:int) : unit 
  requires { n >= 1 }
  ensures { floor (sqrt (from_int n)) <= floor (sqrt (from_int (n - 1))) + 1 }
  =
  let x = sqrt (from_int n) in
  let a = floor (sqrt (from_int (n - 1))) + 1 in 
  assert {  ceil x <= a + 1
        by  x  = sqrt (from_int (n - 1)) +. _sqrt_incr (n - 1) 
              <=. from_int a +. _sqrt_incr (n-1)
              <=. from_int a +. 1.
        so  ceil x <= ceil (from_int (a + 1)) };
  if ceil x = a+1 then (
    assert {  n-1 < a*a < n
           by sqrt (from_int (n - 1)) <. from_int a <. sqrt (from_int n)
           so from_int (n-1) = (sqrt (from_int (n-1)))*.(sqrt (from_int (n-1))) 
                         <.  (from_int a) *. (from_int a)
                         <. (sqrt (from_int n)) *. (sqrt (from_int n)) 
                         = sqr (from_int n) };
    absurd);
  assert { floor (sqrt (from_int n)) <= ceil x <= a };
  ()


let compute_sqrt (n: int) (ghost x : real) (xp : int)
  requires { 0. <=. x }
  requires { framing x xp (2*n) }
  ensures { framing (sqrt x) result n } 
  =
  if xp <= 0 then (
    assert { -. _B (-n) <. 0. <=. sqrt x };
    assert {  sqrt x <. _B (-n) 
           by x <. (from_int xp +. 1.) *. _B (-2*n) <=. 1. *. _B (-2*n)
           so x <=. _B (-2*n) && not x = _B (-2*n)
           so sqrt x <=. sqrt (_B (-2*n)) && not sqrt x = sqrt (_B (-2*n)) };
    0)
  else (
    assert {  sqrt x <. (from_int (floor (sqrt (from_int xp))) +. 1.) *. _B (-n)
       by x <=. (from_int xp +. 1.) *. _B (-2*n) 
          && not x = (from_int xp +. 1.) *. _B (-2*n)
       so sqrt x <=. sqrt ((from_int xp +. 1.) *. _B (-2*n))
          && not sqrt x = sqrt ((from_int xp +. 1.) *. _B (-2*n)) 
          && from_int xp +. 1. >=. 0. && _B (-2*n) >=. 0.
       so sqrt x <=. sqrt (from_int xp +. 1.) *. sqrt (_B (-2*n))
          && not sqrt x = sqrt (from_int xp +. 1.) *. sqrt (_B (-2*n))
       so sqrt x <. sqrt (from_int xp +. 1.) *. _B (-n) 
          && sqrt (from_int xp +. 1.) <=. from_int (floor (sqrt (from_int xp))) +. 1. };
    assert {  (from_int (floor (sqrt (from_int xp))) -. 1.) *. _B (-n) <. sqrt x
       by x >=. (from_int xp -. 1.) *. _B (-2*n)
          && not x = (from_int xp -. 1.) *. _B (-2*n)
          && from_int xp -. 1. >=. 0. && _B (-2*n) >=. 0.
       so x >=. (from_int xp -. 1.) *. _B (-2*n) >=. 0.
          && not x = (from_int xp -. 1.) *. _B (-2*n)
       so sqrt x >=. sqrt ((from_int xp -. 1.) *. _B (-2*n))
          && not sqrt x = sqrt ((from_int xp -. 1.) *. _B (-2*n)) 
          && from_int xp -. 1. >=. 0. && _B (-2*n) >=. 0.
       so sqrt x >=. sqrt (from_int xp -. 1.) *. sqrt (_B (-2*n))
          && not sqrt x = sqrt (from_int xp -. 1.) *. sqrt (_B (-2*n))
       so sqrt x >. sqrt (from_int xp -. 1.) *. _B (-n) 
          && sqrt (from_int xp -. 1.) >=. from_int (floor (sqrt (from_int xp))) -. 1. };    
    isqrt xp)

    
(**** 4.5 Compute ****)
(**************)

type term =
  | Cst int
  | Add term term
  | Neg term
  | Sub term term
  | Sqrt term
  
let rec ghost function interp (t: term) : real = 
  match t with
    | Cst n -> from_int n
    | Add t' t'' -> interp t' +. interp t''
    | Neg t' -> -.(interp t')
    | Sub t' t'' -> interp t' -. interp t''
    | Sqrt t' -> sqrt (interp t')
  end

inductive wf_term (term) =
  | wf_cst: 
      forall n:int. wf_term (Cst n)
  | wf_add: 
      forall t t':term. wf_term t -> wf_term t' -> wf_term (Add t t')
  | wf_neg: 
      forall t:term. wf_term t -> wf_term (Neg t)
  | wf_sub: 
      forall t t':term. wf_term t -> wf_term t' -> wf_term (Sub t t')
  | wf_sqrt: 
      forall t:term. interp t >=. 0. -> wf_term t -> wf_term (Sqrt t)

let rec compute (t:term) (n:int) : int
  requires { wf_term t }
  ensures { framing (interp t) result n }
  variant { t }
  =
  match t with
    | Cst x -> compute_cst n x
    | Add t' t'' -> 
        let xp = compute t' (n+1) in
        let yp = compute t'' (n+1) in
          compute_add n (interp t') xp (interp t'') yp  
    | Neg t' -> compute_neg n (interp t') (compute t' n)
    | Sub t' t'' ->
        let xp = compute t' (n+1) in
        let yp = compute t'' (n+1) in
          compute_sub n (interp t') xp (interp t'') yp  
    | Sqrt t' -> compute_sqrt n (interp t') (compute t' (2*n))
  end
